// Generated by gencpp from file assignment2_ros1/GeneratePointRequest.msg
// DO NOT EDIT!


#ifndef ASSIGNMENT2_ROS1_MESSAGE_GENERATEPOINTREQUEST_H
#define ASSIGNMENT2_ROS1_MESSAGE_GENERATEPOINTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace assignment2_ros1
{
template <class ContainerAllocator>
struct GeneratePointRequest_
{
  typedef GeneratePointRequest_<ContainerAllocator> Type;

  GeneratePointRequest_()
    : gp_call(false)  {
    }
  GeneratePointRequest_(const ContainerAllocator& _alloc)
    : gp_call(false)  {
  (void)_alloc;
    }



   typedef uint8_t _gp_call_type;
  _gp_call_type gp_call;





  typedef boost::shared_ptr< ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GeneratePointRequest_

typedef ::assignment2_ros1::GeneratePointRequest_<std::allocator<void> > GeneratePointRequest;

typedef boost::shared_ptr< ::assignment2_ros1::GeneratePointRequest > GeneratePointRequestPtr;
typedef boost::shared_ptr< ::assignment2_ros1::GeneratePointRequest const> GeneratePointRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator1> & lhs, const ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator2> & rhs)
{
  return lhs.gp_call == rhs.gp_call;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator1> & lhs, const ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace assignment2_ros1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70ac6881fb79d423882242adf4594fab";
  }

  static const char* value(const ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70ac6881fb79d423ULL;
  static const uint64_t static_value2 = 0x882242adf4594fabULL;
};

template<class ContainerAllocator>
struct DataType< ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "assignment2_ros1/GeneratePointRequest";
  }

  static const char* value(const ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool gp_call\n"
;
  }

  static const char* value(const ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gp_call);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GeneratePointRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::assignment2_ros1::GeneratePointRequest_<ContainerAllocator>& v)
  {
    s << indent << "gp_call: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gp_call);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ASSIGNMENT2_ROS1_MESSAGE_GENERATEPOINTREQUEST_H
